# Copyright 2024 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!

# this key is for local development only!
manage.json.encryption.key="gvBoGdgzqG1AarzF1LY0zQ=="
psa.json.encryption.key="gvBoGdgzqG1AarzF1LY0zQ=="

# This is the main configuration file for the application.
# ~~~~~

appName=pension-administrator



# Json error handler
play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.backend.http.JsonErrorHandler"

# Play Modules
# ~~~~
# Additional play modules can be added here

play.modules.enabled += "uk.gov.hmrc.mongo.play.PlayMongoModule"
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuthModule"
play.modules.enabled += "bindings.Bindings"

# Session Timeout
# ~~~~
# The default session timeout for the app is 15 minutes (900seconds).
# Updating this is the responsibility of the app - it must issue a new cookie with each request or the session will
# timeout 15 minutes after login (regardless of user activity).
# session.maxAge=900

# Determines whether the mongo cached data is encrypted or not.
encrypted = false

#Determines whether the feature toggle is in Production mode or test mode
enable-dynamic-switches: true

# this key is for local development only!
queryParameter.encryption.key="gvBoGdgzqG1AarzF1LY0zQ=="

# Session configuration
# ~~~~~
application.session.httpOnly=false
application.session.secure=false
play.http.parser.maxMemoryBuffer=1024K

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes


# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

mongo.migration.enable.migration = false
play.modules.enabled += "StartupModule"

# Microservice specific config

mongodb {
    uri = "mongodb://localhost:27017/"${appName}
    pension-administrator-cache {
        manage-pensions {
            name = manage-pensions
            timeToLiveInSeconds = 3600
        }
        invitations {
            name = invitations
        }
        psa-data {
            name = ${appName}-psa-data
            timeToLiveInDays = 29
        }
        admin-data {
            name = admin-data
        }
        toggle-data {
            name = toggle-data
        }
        session-data {
            name = session-data
            timeToLiveInSeconds = 3600
        }
        minimal-detail {
            name = minimal-detail
            timeToLiveInSeconds = 3600
        }
    }
}

serviceUrls {
    scheme.administrator.register = "/pension-online/subscription"
    register.with.id.individual = "/registration/individual/nino/%s"
    register.with.id.organisation = "/registration/organisation/utr/%s"
    register.without.id.organisation = "/registration/02.00.00/organisation"
    register.without.id.individual = "/registration/02.00.00/individual"
    if {
        psa.minimal.details = "/pension-online/psa-min-details/%s/%s/%s"
        remove.psa = "/pension-online/cease-scheme/pods/%s"
        createPsaAssociation = "/pension-online/association/pods/%s"
        listOfSchemes = "/pensions-scheme/list-of-schemes"
        deregister.psa = "/pension-online/de-registration/poda/psaid/%s"
        updateClientReference = "/pension-online/update-client-reference/pods"
    }
    psa.subscription.details = "/pension-online/psa-subscription-details/%s"
    psa.variation.details = "/pension-online/psa-variation/psaid/%s"
    checkPsaAssociation = "/pensions-scheme/is-psa-associated"
    getSchemeDetails = "/pensions-scheme/scheme"
    email = "/hmrc/email"
    invitation.callback = "/pension-administrator/email-response/%s/%s"
}

microservice {
    services {
        des-hod {
            host = localhost
            port = 8202
            env = "ist0"
            authorizationToken = "local"
        }

        if-hod {
          host = localhost
          port = 8202
          env = "ist0"
          authorizationToken = "local"
        }

        auth {
            host = localhost
            port = 8500
        }

        email {
            host = localhost
            port = 8300
        }

        pensions-scheme {
            host = localhost
            port = 8203
        }

        pension-administrator {
            host = localhost
            port = 8205
        }
    }
}
